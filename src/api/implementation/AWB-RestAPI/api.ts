/* tslint:disable */
/* eslint-disable */
/**
 * Agent.Workbench REST - API
 * This is the REST-API for Agent.Workbench in an embbedded system mode.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: admin@enflex.it
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * Contains Information about one singular Bundle
 * @export
 * @interface BundleInformation
 */
export interface BundleInformation {
    /**
     * 
     * @type {string}
     * @memberof BundleInformation
     */
    'FeatureName': string;
    /**
     * 
     * @type {string}
     * @memberof BundleInformation
     */
    'Provider': string;
    /**
     * 
     * @type {string}
     * @memberof BundleInformation
     */
    'BundleName': string;
    /**
     * 
     * @type {number}
     * @memberof BundleInformation
     */
    'BundleID': number;
    /**
     * 
     * @type {Version}
     * @memberof BundleInformation
     */
    'Version': Version;
}
/**
 * An Event that occured and can be logged
 * @export
 * @interface Event
 */
export interface Event {
    /**
     * The time at which the event happened
     * @type {string}
     * @memberof Event
     */
    'time': string;
    /**
     * 
     * @type {EventLogTypes}
     * @memberof Event
     */
    'typeOfEvent'?: EventLogTypes;
    /**
     * the event that has happened
     * @type {string}
     * @memberof Event
     */
    'event': EventEventEnum;
}

export const EventEventEnum = {
    Running: 'Running',
    Starting: 'Starting',
    OpenProject: 'Open Project',
    StartingAgentSystem: 'Starting Agent System',
    UpdateSheduled: 'Update Sheduled',
    UpdateExecuted: 'Update Executed',
    UpdateFailure: 'Update Failure',
    UpdateInProgess: 'Update in Progess',
    RestartSheduled: 'Restart Sheduled',
    RestartExecuted: 'Restart Executed',
    RestartFailure: 'Restart Failure',
    RestartInProgess: 'Restart in Progess'
} as const;

export type EventEventEnum = typeof EventEventEnum[keyof typeof EventEventEnum];

/**
 * The different types of EventLogs
 * @export
 * @enum {string}
 */

export const EventLogTypes = {
    Awb: 'AWB',
    Project: 'Project',
    Setup: 'Setup',
    Agent: 'Agent'
} as const;

export type EventLogTypes = typeof EventLogTypes[keyof typeof EventLogTypes];


/**
 * The Agent.Workbench execution state with its open project and the selected setup
 * @export
 * @interface ExecutionState
 */
export interface ExecutionState {
    /**
     * * \'APPLICATION\' - Runs as end user application in an desktop environment * \'SERVER\' - Runs as Background server-system * \'SERVER_MASTER\' - Runs as central \'server. master\' system and manages all \'server.slave\' systems * \'SERVER_SLAVE\' - Runs as central \'server. slave\' system and wait for start order from the \'server.master\' * \'DEVICE_SYSTEM\' - Runs as system that directly executes single agents or projects 
     * @type {string}
     * @memberof ExecutionState
     */
    'executionMode'?: ExecutionStateExecutionModeEnum;
    /**
     * * \'SETUP\' - Runs the selected setup of an AWB projekt * \'AGENT\' - Runs one or more agents from an AWB project 
     * @type {string}
     * @memberof ExecutionState
     */
    'deviceSystemExecutionMode'?: ExecutionStateDeviceSystemExecutionModeEnum;
    /**
     * The currently open project
     * @type {string}
     * @memberof ExecutionState
     */
    'project'?: string;
    /**
     * The currently open project-setup
     * @type {string}
     * @memberof ExecutionState
     */
    'setup'?: string;
}

export const ExecutionStateExecutionModeEnum = {
    Application: 'APPLICATION',
    Server: 'SERVER',
    ServerMaster: 'SERVER_MASTER',
    ServerSlave: 'SERVER_SLAVE',
    DeviceSystem: 'DEVICE_SYSTEM'
} as const;

export type ExecutionStateExecutionModeEnum = typeof ExecutionStateExecutionModeEnum[keyof typeof ExecutionStateExecutionModeEnum];
export const ExecutionStateDeviceSystemExecutionModeEnum = {
    Setup: 'SETUP',
    Agent: 'AGENT'
} as const;

export type ExecutionStateDeviceSystemExecutionModeEnum = typeof ExecutionStateDeviceSystemExecutionModeEnum[keyof typeof ExecutionStateDeviceSystemExecutionModeEnum];

/**
 * Describes a single network connection.
 * @export
 * @interface NetworkConnection
 */
export interface NetworkConnection {
    /**
     * 
     * @type {string}
     * @memberof NetworkConnection
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof NetworkConnection
     */
    'displayName': string;
    /**
     * 
     * @type {string}
     * @memberof NetworkConnection
     */
    'macAddress': string;
    /**
     * 
     * @type {string}
     * @memberof NetworkConnection
     */
    'ip4Addresses': string;
    /**
     * 
     * @type {string}
     * @memberof NetworkConnection
     */
    'ip6Addresses': string;
    /**
     * 
     * @type {number}
     * @memberof NetworkConnection
     */
    'trafficSendInMB': number;
    /**
     * 
     * @type {number}
     * @memberof NetworkConnection
     */
    'trafficReceivedInMB': number;
}
/**
 * 
 * @export
 * @interface PasswordChange
 */
export interface PasswordChange {
    /**
     * 
     * @type {string}
     * @memberof PasswordChange
     */
    'password_old': string;
    /**
     * 
     * @type {string}
     * @memberof PasswordChange
     */
    'password_new': string;
}
/**
 * 
 * @export
 * @interface Properties
 */
export interface Properties {
    /**
     * 
     * @type {Array<PropertyEntry>}
     * @memberof Properties
     */
    'propertyEntries': Array<PropertyEntry>;
}
/**
 * 
 * @export
 * @interface PropertyEntry
 */
export interface PropertyEntry {
    /**
     * 
     * @type {string}
     * @memberof PropertyEntry
     */
    'key': string;
    /**
     * 
     * @type {string}
     * @memberof PropertyEntry
     */
    'value': string;
    /**
     * 
     * @type {ValueType}
     * @memberof PropertyEntry
     */
    'valueType': ValueType;
}


/**
 * The system information consisting of Hardware and OS information
 * @export
 * @interface SystemInformation
 */
export interface SystemInformation {
    /**
     * 
     * @type {string}
     * @memberof SystemInformation
     */
    'osDescription': string;
    /**
     * 
     * @type {string}
     * @memberof SystemInformation
     */
    'osManufacturer': string;
    /**
     * 
     * @type {string}
     * @memberof SystemInformation
     */
    'osFamilly': string;
    /**
     * 
     * @type {string}
     * @memberof SystemInformation
     */
    'osVersion': string;
    /**
     * 
     * @type {string}
     * @memberof SystemInformation
     */
    'processorName': string;
    /**
     * 
     * @type {number}
     * @memberof SystemInformation
     */
    'processorFrequenceInMhz': number;
    /**
     * 
     * @type {number}
     * @memberof SystemInformation
     */
    'processorNoPhysical': number;
    /**
     * 
     * @type {number}
     * @memberof SystemInformation
     */
    'processorNoLogical': number;
    /**
     * 
     * @type {number}
     * @memberof SystemInformation
     */
    'memoryTotalInGB': number;
    /**
     * 
     * @type {number}
     * @memberof SystemInformation
     */
    'swapMemoryTotalInGB': number;
    /**
     * 
     * @type {number}
     * @memberof SystemInformation
     */
    'heapMemoryMaxInGB': number;
    /**
     * 
     * @type {Array<NetworkConnection>}
     * @memberof SystemInformation
     */
    'networkConnections': Array<NetworkConnection>;
}
/**
 * The systems current load, includung CPU, memoryand HEAP  usage. Further, the number of Java threads are returned.
 * @export
 * @interface SystemLoad
 */
export interface SystemLoad {
    /**
     * The CPU usage in percent
     * @type {number}
     * @memberof SystemLoad
     */
    'cpuUsage': number;
    /**
     * The memory usage in percent
     * @type {number}
     * @memberof SystemLoad
     */
    'memUsage': number;
    /**
     * The Heap usage in percen
     * @type {number}
     * @memberof SystemLoad
     */
    'heapUsage': number;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const ValueType = {
    Integer: 'INTEGER',
    Boolean: 'BOOLEAN',
    String: 'STRING',
    Long: 'LONG',
    Double: 'DOUBLE'
} as const;

export type ValueType = typeof ValueType[keyof typeof ValueType];


/**
 * Object that holds Version Information.
 * @export
 * @interface Version
 */
export interface Version {
    /**
     * the major version number
     * @type {number}
     * @memberof Version
     */
    'major': number;
    /**
     * the minor version number
     * @type {number}
     * @memberof Version
     */
    'minor': number;
    /**
     * the micro version number
     * @type {number}
     * @memberof Version
     */
    'micro': number;
    /**
     * the version qualifier
     * @type {string}
     * @memberof Version
     */
    'qualifier': string;
}

/**
 * AdminsApi - axios parameter creator
 * @export
 */
export const AdminsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns the current state of Agent.Workbench consisiting information  about the execution mode, the currently open project and other. 
         * @summary Returns the current AWB state
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        executionStateGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/executionState`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns Hardware and system  information. 
         * @summary Returns system information
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        infoGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/info`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the current system load measured by Agent.Workbench that includes CPU-, memory- and Java Heap - load. Further, the number of threads and agents will be returnes 
         * @summary Returns the current System load
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loadGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/load`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AdminsApi - functional programming interface
 * @export
 */
export const AdminsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AdminsApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns the current state of Agent.Workbench consisiting information  about the execution mode, the currently open project and other. 
         * @summary Returns the current AWB state
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async executionStateGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExecutionState>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.executionStateGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminsApi.executionStateGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Returns Hardware and system  information. 
         * @summary Returns system information
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async infoGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SystemInformation>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.infoGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminsApi.infoGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Returns the current system load measured by Agent.Workbench that includes CPU-, memory- and Java Heap - load. Further, the number of threads and agents will be returnes 
         * @summary Returns the current System load
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async loadGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SystemLoad>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.loadGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminsApi.loadGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AdminsApi - factory interface
 * @export
 */
export const AdminsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AdminsApiFp(configuration)
    return {
        /**
         * Returns the current state of Agent.Workbench consisiting information  about the execution mode, the currently open project and other. 
         * @summary Returns the current AWB state
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        executionStateGet(options?: RawAxiosRequestConfig): AxiosPromise<ExecutionState> {
            return localVarFp.executionStateGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Returns Hardware and system  information. 
         * @summary Returns system information
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        infoGet(options?: RawAxiosRequestConfig): AxiosPromise<SystemInformation> {
            return localVarFp.infoGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the current system load measured by Agent.Workbench that includes CPU-, memory- and Java Heap - load. Further, the number of threads and agents will be returnes 
         * @summary Returns the current System load
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loadGet(options?: RawAxiosRequestConfig): AxiosPromise<SystemLoad> {
            return localVarFp.loadGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AdminsApi - object-oriented interface
 * @export
 * @class AdminsApi
 * @extends {BaseAPI}
 */
export class AdminsApi extends BaseAPI {
    /**
     * Returns the current state of Agent.Workbench consisiting information  about the execution mode, the currently open project and other. 
     * @summary Returns the current AWB state
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminsApi
     */
    public executionStateGet(options?: RawAxiosRequestConfig) {
        return AdminsApiFp(this.configuration).executionStateGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns Hardware and system  information. 
     * @summary Returns system information
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminsApi
     */
    public infoGet(options?: RawAxiosRequestConfig) {
        return AdminsApiFp(this.configuration).infoGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the current system load measured by Agent.Workbench that includes CPU-, memory- and Java Heap - load. Further, the number of threads and agents will be returnes 
     * @summary Returns the current System load
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminsApi
     */
    public loadGet(options?: RawAxiosRequestConfig) {
        return AdminsApiFp(this.configuration).loadGet(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * DoActionApi - axios parameter creator
 * @export
 */
export const DoActionApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * tries to shedule restart
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        doRestartPost: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/doRestart`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * tries to initiate update of awb
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        doUpdatePost: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/doUpdate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DoActionApi - functional programming interface
 * @export
 */
export const DoActionApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DoActionApiAxiosParamCreator(configuration)
    return {
        /**
         * tries to shedule restart
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async doRestartPost(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.doRestartPost(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DoActionApi.doRestartPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * tries to initiate update of awb
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async doUpdatePost(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.doUpdatePost(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DoActionApi.doUpdatePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DoActionApi - factory interface
 * @export
 */
export const DoActionApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DoActionApiFp(configuration)
    return {
        /**
         * tries to shedule restart
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        doRestartPost(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.doRestartPost(options).then((request) => request(axios, basePath));
        },
        /**
         * tries to initiate update of awb
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        doUpdatePost(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.doUpdatePost(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DoActionApi - object-oriented interface
 * @export
 * @class DoActionApi
 * @extends {BaseAPI}
 */
export class DoActionApi extends BaseAPI {
    /**
     * tries to shedule restart
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DoActionApi
     */
    public doRestartPost(options?: RawAxiosRequestConfig) {
        return DoActionApiFp(this.configuration).doRestartPost(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * tries to initiate update of awb
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DoActionApi
     */
    public doUpdatePost(options?: RawAxiosRequestConfig) {
        return DoActionApiFp(this.configuration).doUpdatePost(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * InfoApi - axios parameter creator
 * @export
 */
export const InfoApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary get logs of specific type
         * @param {EventLogTypes} type The type which is retrieved by awb
         * @param {number} [amount] the maximum number of logs to retrieve. If no number is specified the default is 10
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventLogGet: async (type: EventLogTypes, amount?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'type' is not null or undefined
            assertParamExists('eventLogGet', 'type', type)
            const localVarPath = `/eventLog`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (amount !== undefined) {
                localVarQueryParameter['amount'] = amount;
            }

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns required base configuration settings for the curren web application
         * @summary Returns required base configuration settings for the curren web application
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAppSettings: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/app/settings/get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get the details about an AWB Installation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        installationDetailsGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/installationDetails`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Checks wether an update for the AWB is available or not
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        isUpdateAvailableGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/isUpdateAvailable`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Enables to update or set the required base configuration settings for the curren web application
         * @summary Enables to update or set the required base configuration settings for the curren web application
         * @param {Properties} [properties] The new settings
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setAppSettings: async (properties?: Properties, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/app/settings/set`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(properties, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Return the current version number of Agent.Workbench
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        versionGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/version`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * InfoApi - functional programming interface
 * @export
 */
export const InfoApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = InfoApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary get logs of specific type
         * @param {EventLogTypes} type The type which is retrieved by awb
         * @param {number} [amount] the maximum number of logs to retrieve. If no number is specified the default is 10
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eventLogGet(type: EventLogTypes, amount?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Event>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.eventLogGet(type, amount, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['InfoApi.eventLogGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Returns required base configuration settings for the curren web application
         * @summary Returns required base configuration settings for the curren web application
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAppSettings(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Properties>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAppSettings(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['InfoApi.getAppSettings']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get the details about an AWB Installation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async installationDetailsGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<BundleInformation>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.installationDetailsGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['InfoApi.installationDetailsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Checks wether an update for the AWB is available or not
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async isUpdateAvailableGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.isUpdateAvailableGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['InfoApi.isUpdateAvailableGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Enables to update or set the required base configuration settings for the curren web application
         * @summary Enables to update or set the required base configuration settings for the curren web application
         * @param {Properties} [properties] The new settings
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setAppSettings(properties?: Properties, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.setAppSettings(properties, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['InfoApi.setAppSettings']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Return the current version number of Agent.Workbench
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async versionGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Version>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.versionGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['InfoApi.versionGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * InfoApi - factory interface
 * @export
 */
export const InfoApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = InfoApiFp(configuration)
    return {
        /**
         * 
         * @summary get logs of specific type
         * @param {EventLogTypes} type The type which is retrieved by awb
         * @param {number} [amount] the maximum number of logs to retrieve. If no number is specified the default is 10
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventLogGet(type: EventLogTypes, amount?: number, options?: RawAxiosRequestConfig): AxiosPromise<Array<Event>> {
            return localVarFp.eventLogGet(type, amount, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns required base configuration settings for the curren web application
         * @summary Returns required base configuration settings for the curren web application
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAppSettings(options?: RawAxiosRequestConfig): AxiosPromise<Properties> {
            return localVarFp.getAppSettings(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get the details about an AWB Installation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        installationDetailsGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<BundleInformation>> {
            return localVarFp.installationDetailsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Checks wether an update for the AWB is available or not
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        isUpdateAvailableGet(options?: RawAxiosRequestConfig): AxiosPromise<boolean> {
            return localVarFp.isUpdateAvailableGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Enables to update or set the required base configuration settings for the curren web application
         * @summary Enables to update or set the required base configuration settings for the curren web application
         * @param {Properties} [properties] The new settings
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setAppSettings(properties?: Properties, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.setAppSettings(properties, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Return the current version number of Agent.Workbench
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        versionGet(options?: RawAxiosRequestConfig): AxiosPromise<Version> {
            return localVarFp.versionGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * InfoApi - object-oriented interface
 * @export
 * @class InfoApi
 * @extends {BaseAPI}
 */
export class InfoApi extends BaseAPI {
    /**
     * 
     * @summary get logs of specific type
     * @param {EventLogTypes} type The type which is retrieved by awb
     * @param {number} [amount] the maximum number of logs to retrieve. If no number is specified the default is 10
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InfoApi
     */
    public eventLogGet(type: EventLogTypes, amount?: number, options?: RawAxiosRequestConfig) {
        return InfoApiFp(this.configuration).eventLogGet(type, amount, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns required base configuration settings for the curren web application
     * @summary Returns required base configuration settings for the curren web application
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InfoApi
     */
    public getAppSettings(options?: RawAxiosRequestConfig) {
        return InfoApiFp(this.configuration).getAppSettings(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get the details about an AWB Installation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InfoApi
     */
    public installationDetailsGet(options?: RawAxiosRequestConfig) {
        return InfoApiFp(this.configuration).installationDetailsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Checks wether an update for the AWB is available or not
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InfoApi
     */
    public isUpdateAvailableGet(options?: RawAxiosRequestConfig) {
        return InfoApiFp(this.configuration).isUpdateAvailableGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Enables to update or set the required base configuration settings for the curren web application
     * @summary Enables to update or set the required base configuration settings for the curren web application
     * @param {Properties} [properties] The new settings
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InfoApi
     */
    public setAppSettings(properties?: Properties, options?: RawAxiosRequestConfig) {
        return InfoApiFp(this.configuration).setAppSettings(properties, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Return the current version number of Agent.Workbench
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InfoApi
     */
    public versionGet(options?: RawAxiosRequestConfig) {
        return InfoApiFp(this.configuration).versionGet(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * UserApi - axios parameter creator
 * @export
 */
export const UserApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Changes the user password
         * @param {PasswordChange} [passwordChange] The credentials to login.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changePassword: async (passwordChange?: PasswordChange, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/user/pswd-change`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(passwordChange, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Does NOT use Bearer Auth like whole other application. Only Endpoint that uses Basic Authentication. Expects previously configured Credentials and returns appropriate Bearer Token
         * @summary Logs user into the system
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginUser: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/user/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Effectively logs-out the user from the System 
         * @summary Logs out the user from the system
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logout: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/user/logout`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserApi - functional programming interface
 * @export
 */
export const UserApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Changes the user password
         * @param {PasswordChange} [passwordChange] The credentials to login.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async changePassword(passwordChange?: PasswordChange, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.changePassword(passwordChange, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.changePassword']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Does NOT use Bearer Auth like whole other application. Only Endpoint that uses Basic Authentication. Expects previously configured Credentials and returns appropriate Bearer Token
         * @summary Logs user into the system
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async loginUser(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.loginUser(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.loginUser']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Effectively logs-out the user from the System 
         * @summary Logs out the user from the system
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async logout(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.logout(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.logout']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * UserApi - factory interface
 * @export
 */
export const UserApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserApiFp(configuration)
    return {
        /**
         * 
         * @summary Changes the user password
         * @param {PasswordChange} [passwordChange] The credentials to login.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changePassword(passwordChange?: PasswordChange, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.changePassword(passwordChange, options).then((request) => request(axios, basePath));
        },
        /**
         * Does NOT use Bearer Auth like whole other application. Only Endpoint that uses Basic Authentication. Expects previously configured Credentials and returns appropriate Bearer Token
         * @summary Logs user into the system
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginUser(options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.loginUser(options).then((request) => request(axios, basePath));
        },
        /**
         * Effectively logs-out the user from the System 
         * @summary Logs out the user from the system
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logout(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.logout(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export class UserApi extends BaseAPI {
    /**
     * 
     * @summary Changes the user password
     * @param {PasswordChange} [passwordChange] The credentials to login.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public changePassword(passwordChange?: PasswordChange, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).changePassword(passwordChange, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Does NOT use Bearer Auth like whole other application. Only Endpoint that uses Basic Authentication. Expects previously configured Credentials and returns appropriate Bearer Token
     * @summary Logs user into the system
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public loginUser(options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).loginUser(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Effectively logs-out the user from the System 
     * @summary Logs out the user from the system
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public logout(options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).logout(options).then((request) => request(this.axios, this.basePath));
    }
}



