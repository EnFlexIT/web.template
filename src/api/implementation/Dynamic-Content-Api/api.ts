/* tslint:disable */
/* eslint-disable */
/**
 * EnFlex.IT - Dynamic Content Api
 * This is the Definition of the Api to dynamically fetch content for any enflex.it application
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: admin@enflex.it
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface AbstractSiteContent
 */
export interface AbstractSiteContent {
    /**
     * 
     * @type {number}
     * @memberof AbstractSiteContent
     */
    'uniqueContentID': number;
    /**
     * 
     * @type {boolean}
     * @memberof AbstractSiteContent
     */
    'editable': boolean;
    /**
     * 
     * @type {number}
     * @memberof AbstractSiteContent
     */
    'updatePeriodInSeconds': number;
}
/**
 * 
 * @export
 * @interface AbstractSiteContentChart
 */
export interface AbstractSiteContentChart extends AbstractSiteContent {
    /**
     * 
     * @type {string}
     * @memberof AbstractSiteContentChart
     */
    'title': string;
    /**
     * 
     * @type {boolean}
     * @memberof AbstractSiteContentChart
     */
    'showLegend'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof AbstractSiteContentChart
     */
    'xAxisLabel'?: string;
    /**
     * 
     * @type {string}
     * @memberof AbstractSiteContentChart
     */
    'yAxisLabel'?: string;
    /**
     * 
     * @type {Array<DataSeries>}
     * @memberof AbstractSiteContentChart
     */
    'dataSeries': Array<DataSeries>;
}
/**
 * 
 * @export
 * @interface AbstractValuePair
 */
export interface AbstractValuePair {
    /**
     * 
     * @type {number}
     * @memberof AbstractValuePair
     */
    'value': number;
}
/**
 * 
 * @export
 * @interface DataSeries
 */
export interface DataSeries {
    /**
     * 
     * @type {string}
     * @memberof DataSeries
     */
    'label': string;
    /**
     * 
     * @type {boolean}
     * @memberof DataSeries
     */
    'secondaryYAxis'?: boolean;
    /**
     * 
     * @type {Array<AbstractValuePair>}
     * @memberof DataSeries
     */
    'entries': Array<AbstractValuePair>;
}
/**
 * 
 * @export
 * @interface MenuItem
 */
export interface MenuItem {
    /**
     * 
     * @type {number}
     * @memberof MenuItem
     */
    'menuID'?: number;
    /**
     * 
     * @type {number}
     * @memberof MenuItem
     */
    'parentID'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof MenuItem
     */
    'isHeadMenu': boolean;
    /**
     * 
     * @type {number}
     * @memberof MenuItem
     */
    'position': number;
    /**
     * 
     * @type {string}
     * @memberof MenuItem
     */
    'caption': string;
    /**
     * 
     * @type {string}
     * @memberof MenuItem
     */
    'pathID'?: string;
    /**
     * 
     * @type {string}
     * @memberof MenuItem
     */
    'pathCaption'?: string;
    /**
     * 
     * @type {string}
     * @memberof MenuItem
     */
    'pathPosition'?: string;
}
/**
 * 
 * @export
 * @interface MenuList
 */
export interface MenuList {
    /**
     * 
     * @type {Array<MenuItem>}
     * @memberof MenuList
     */
    'menuList'?: Array<MenuItem>;
}
/**
 * 
 * @export
 * @interface PropertyEntry
 */
export interface PropertyEntry {
    /**
     * 
     * @type {string}
     * @memberof PropertyEntry
     */
    'key': string;
    /**
     * 
     * @type {string}
     * @memberof PropertyEntry
     */
    'value': string;
    /**
     * 
     * @type {ValueType}
     * @memberof PropertyEntry
     */
    'valueType': ValueType;
}


/**
 * 
 * @export
 * @interface SiteContentBarChart
 */
export interface SiteContentBarChart extends AbstractSiteContentChart {
}
/**
 * 
 * @export
 * @interface SiteContentImage
 */
export interface SiteContentImage extends SiteContentMedia {
    /**
     * 
     * @type {string}
     * @memberof SiteContentImage
     */
    'dataInB64': string;
}
/**
 * 
 * @export
 * @interface SiteContentLineChart
 */
export interface SiteContentLineChart extends AbstractSiteContentChart {
    /**
     * 
     * @type {string}
     * @memberof SiteContentLineChart
     */
    'secondaryYAxisLabel'?: string;
}
/**
 * 
 * @export
 * @interface SiteContentList
 */
export interface SiteContentList {
    /**
     * 
     * @type {Array<AbstractSiteContent>}
     * @memberof SiteContentList
     */
    'contentList': Array<AbstractSiteContent>;
}
/**
 * 
 * @export
 * @interface SiteContentListUpdate
 */
export interface SiteContentListUpdate {
    /**
     * 
     * @type {number}
     * @memberof SiteContentListUpdate
     */
    'menuID'?: number;
    /**
     * 
     * @type {Array<AbstractSiteContent>}
     * @memberof SiteContentListUpdate
     */
    'contentList'?: Array<AbstractSiteContent>;
}
/**
 * 
 * @export
 * @interface SiteContentMedia
 */
export interface SiteContentMedia extends AbstractSiteContent {
    /**
     * 
     * @type {string}
     * @memberof SiteContentMedia
     */
    'mimeType': string;
}
/**
 * 
 * @export
 * @interface SiteContentPieChart
 */
export interface SiteContentPieChart extends AbstractSiteContentChart {
}
/**
 * 
 * @export
 * @interface SiteContentProperties
 */
export interface SiteContentProperties extends AbstractSiteContent {
    /**
     * 
     * @type {Array<PropertyEntry>}
     * @memberof SiteContentProperties
     */
    'propertyEntries': Array<PropertyEntry>;
}
/**
 * 
 * @export
 * @interface SiteContentScatterPlot
 */
export interface SiteContentScatterPlot extends AbstractSiteContentChart {
}
/**
 * 
 * @export
 * @interface SiteContentTable
 */
export interface SiteContentTable extends AbstractSiteContent {
    /**
     * 
     * @type {Array<string>}
     * @memberof SiteContentTable
     */
    'header': Array<string>;
    /**
     * 
     * @type {Array<ValueType>}
     * @memberof SiteContentTable
     */
    'dataType': Array<ValueType>;
    /**
     * 
     * @type {Array<Array<string>>}
     * @memberof SiteContentTable
     */
    'data': Array<Array<string>>;
}
/**
 * 
 * @export
 * @interface SiteContentText
 */
export interface SiteContentText extends SiteContentMedia {
    /**
     * 
     * @type {string}
     * @memberof SiteContentText
     */
    'text': string;
}
/**
 * 
 * @export
 * @interface SiteContentTimeSeriesChart
 */
export interface SiteContentTimeSeriesChart extends SiteContentLineChart {
    /**
     * 
     * @type {string}
     * @memberof SiteContentTimeSeriesChart
     */
    'timeFormat'?: string;
}
/**
 * 
 * @export
 * @interface ValuePairCategory
 */
export interface ValuePairCategory extends AbstractValuePair {
    /**
     * 
     * @type {string}
     * @memberof ValuePairCategory
     */
    'category'?: string;
}
/**
 * 
 * @export
 * @interface ValuePairDateTime
 */
export interface ValuePairDateTime extends AbstractValuePair {
    /**
     * 
     * @type {string}
     * @memberof ValuePairDateTime
     */
    'isoDateTime': string;
}
/**
 * 
 * @export
 * @interface ValuePairNumeric
 */
export interface ValuePairNumeric extends AbstractValuePair {
    /**
     * 
     * @type {number}
     * @memberof ValuePairNumeric
     */
    'xValue': number;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const ValueType = {
    Integer: 'INTEGER',
    Boolean: 'BOOLEAN',
    String: 'STRING',
    Long: 'LONG',
    Double: 'DOUBLE'
} as const;

export type ValueType = typeof ValueType[keyof typeof ValueType];



/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns the content element with the specified ID
         * @summary Will return the content element with the specified ID
         * @param {number} elementID numeric ID of the content element
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contentElementElementIDGet: async (elementID: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'elementID' is not null or undefined
            assertParamExists('contentElementElementIDGet', 'elementID', elementID)
            const localVarPath = `/contentElement/{elementID}`
                .replace(`{${"elementID"}}`, encodeURIComponent(String(elementID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Enables to update content elements
         * @param {AbstractSiteContent} [abstractSiteContent] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contentElementPut: async (abstractSiteContent?: AbstractSiteContent, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/contentElement/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(abstractSiteContent, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the list of content elements for the specified menu ID.
         * @summary Returns the content for the specified ID
         * @param {number} menuID numeric ID of the content
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contentMenuIDGet: async (menuID: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'menuID' is not null or undefined
            assertParamExists('contentMenuIDGet', 'menuID', menuID)
            const localVarPath = `/content/{menuID}`
                .replace(`{${"menuID"}}`, encodeURIComponent(String(menuID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Enables to update content
         * @param {SiteContentListUpdate} [siteContentListUpdate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contentPut: async (siteContentListUpdate?: SiteContentListUpdate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/content/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(siteContentListUpdate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the menu structure available for the current user
         * @summary Enables to build-up the menu structure
         * @param {string} [lang] the language locale to use
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        menuGet: async (lang?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/menu/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (lang !== undefined) {
                localVarQueryParameter['lang'] = lang;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns the content element with the specified ID
         * @summary Will return the content element with the specified ID
         * @param {number} elementID numeric ID of the content element
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async contentElementElementIDGet(elementID: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AbstractSiteContent>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.contentElementElementIDGet(elementID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.contentElementElementIDGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Enables to update content elements
         * @param {AbstractSiteContent} [abstractSiteContent] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async contentElementPut(abstractSiteContent?: AbstractSiteContent, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.contentElementPut(abstractSiteContent, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.contentElementPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Returns the list of content elements for the specified menu ID.
         * @summary Returns the content for the specified ID
         * @param {number} menuID numeric ID of the content
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async contentMenuIDGet(menuID: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SiteContentList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.contentMenuIDGet(menuID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.contentMenuIDGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Enables to update content
         * @param {SiteContentListUpdate} [siteContentListUpdate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async contentPut(siteContentListUpdate?: SiteContentListUpdate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.contentPut(siteContentListUpdate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.contentPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Returns the menu structure available for the current user
         * @summary Enables to build-up the menu structure
         * @param {string} [lang] the language locale to use
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async menuGet(lang?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MenuList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.menuGet(lang, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.menuGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * Returns the content element with the specified ID
         * @summary Will return the content element with the specified ID
         * @param {number} elementID numeric ID of the content element
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contentElementElementIDGet(elementID: number, options?: RawAxiosRequestConfig): AxiosPromise<AbstractSiteContent> {
            return localVarFp.contentElementElementIDGet(elementID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Enables to update content elements
         * @param {AbstractSiteContent} [abstractSiteContent] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contentElementPut(abstractSiteContent?: AbstractSiteContent, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.contentElementPut(abstractSiteContent, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the list of content elements for the specified menu ID.
         * @summary Returns the content for the specified ID
         * @param {number} menuID numeric ID of the content
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contentMenuIDGet(menuID: number, options?: RawAxiosRequestConfig): AxiosPromise<SiteContentList> {
            return localVarFp.contentMenuIDGet(menuID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Enables to update content
         * @param {SiteContentListUpdate} [siteContentListUpdate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contentPut(siteContentListUpdate?: SiteContentListUpdate, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.contentPut(siteContentListUpdate, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the menu structure available for the current user
         * @summary Enables to build-up the menu structure
         * @param {string} [lang] the language locale to use
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        menuGet(lang?: string, options?: RawAxiosRequestConfig): AxiosPromise<MenuList> {
            return localVarFp.menuGet(lang, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * Returns the content element with the specified ID
     * @summary Will return the content element with the specified ID
     * @param {number} elementID numeric ID of the content element
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public contentElementElementIDGet(elementID: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).contentElementElementIDGet(elementID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Enables to update content elements
     * @param {AbstractSiteContent} [abstractSiteContent] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public contentElementPut(abstractSiteContent?: AbstractSiteContent, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).contentElementPut(abstractSiteContent, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the list of content elements for the specified menu ID.
     * @summary Returns the content for the specified ID
     * @param {number} menuID numeric ID of the content
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public contentMenuIDGet(menuID: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).contentMenuIDGet(menuID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Enables to update content
     * @param {SiteContentListUpdate} [siteContentListUpdate] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public contentPut(siteContentListUpdate?: SiteContentListUpdate, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).contentPut(siteContentListUpdate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the menu structure available for the current user
     * @summary Enables to build-up the menu structure
     * @param {string} [lang] the language locale to use
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public menuGet(lang?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).menuGet(lang, options).then((request) => request(this.axios, this.basePath));
    }
}



